# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import idp_pb2 as idp__pb2


class UsersStub(object):
    """USERS

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/idp.Users/Create',
                request_serializer=idp__pb2.CreateUserRequest.SerializeToString,
                response_deserializer=idp__pb2.User.FromString,
                )
        self.Get = channel.unary_unary(
                '/idp.Users/Get',
                request_serializer=idp__pb2.GetUserRequest.SerializeToString,
                response_deserializer=idp__pb2.User.FromString,
                )
        self.Update = channel.unary_unary(
                '/idp.Users/Update',
                request_serializer=idp__pb2.UpdateUserRequest.SerializeToString,
                response_deserializer=idp__pb2.User.FromString,
                )
        self.Delete = channel.unary_unary(
                '/idp.Users/Delete',
                request_serializer=idp__pb2.DeleteUserRequest.SerializeToString,
                response_deserializer=idp__pb2.User.FromString,
                )
        self.List = channel.unary_stream(
                '/idp.Users/List',
                request_serializer=idp__pb2.ListUsersRequest.SerializeToString,
                response_deserializer=idp__pb2.User.FromString,
                )


class UsersServicer(object):
    """USERS

    """

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UsersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=idp__pb2.CreateUserRequest.FromString,
                    response_serializer=idp__pb2.User.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=idp__pb2.GetUserRequest.FromString,
                    response_serializer=idp__pb2.User.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=idp__pb2.UpdateUserRequest.FromString,
                    response_serializer=idp__pb2.User.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=idp__pb2.DeleteUserRequest.FromString,
                    response_serializer=idp__pb2.User.SerializeToString,
            ),
            'List': grpc.unary_stream_rpc_method_handler(
                    servicer.List,
                    request_deserializer=idp__pb2.ListUsersRequest.FromString,
                    response_serializer=idp__pb2.User.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'idp.Users', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Users(object):
    """USERS

    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idp.Users/Create',
            idp__pb2.CreateUserRequest.SerializeToString,
            idp__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idp.Users/Get',
            idp__pb2.GetUserRequest.SerializeToString,
            idp__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idp.Users/Update',
            idp__pb2.UpdateUserRequest.SerializeToString,
            idp__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idp.Users/Delete',
            idp__pb2.DeleteUserRequest.SerializeToString,
            idp__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/idp.Users/List',
            idp__pb2.ListUsersRequest.SerializeToString,
            idp__pb2.User.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ServiceAccountsStub(object):
    """SERVICE ACCOUNTS

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/idp.ServiceAccounts/Create',
                request_serializer=idp__pb2.CreateServiceAccountRequest.SerializeToString,
                response_deserializer=idp__pb2.CreateServiceAccountResponse.FromString,
                )
        self.Get = channel.unary_unary(
                '/idp.ServiceAccounts/Get',
                request_serializer=idp__pb2.GetServiceAccountRequest.SerializeToString,
                response_deserializer=idp__pb2.ServiceAccount.FromString,
                )
        self.Update = channel.unary_unary(
                '/idp.ServiceAccounts/Update',
                request_serializer=idp__pb2.UpdateServiceAccountRequest.SerializeToString,
                response_deserializer=idp__pb2.UpdateServiceAccountResponse.FromString,
                )
        self.Delete = channel.unary_unary(
                '/idp.ServiceAccounts/Delete',
                request_serializer=idp__pb2.DeleteServiceAccountRequest.SerializeToString,
                response_deserializer=idp__pb2.ServiceAccount.FromString,
                )
        self.List = channel.unary_stream(
                '/idp.ServiceAccounts/List',
                request_serializer=idp__pb2.ListServiceAccountsRequest.SerializeToString,
                response_deserializer=idp__pb2.ServiceAccount.FromString,
                )


class ServiceAccountsServicer(object):
    """SERVICE ACCOUNTS

    """

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServiceAccountsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=idp__pb2.CreateServiceAccountRequest.FromString,
                    response_serializer=idp__pb2.CreateServiceAccountResponse.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=idp__pb2.GetServiceAccountRequest.FromString,
                    response_serializer=idp__pb2.ServiceAccount.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=idp__pb2.UpdateServiceAccountRequest.FromString,
                    response_serializer=idp__pb2.UpdateServiceAccountResponse.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=idp__pb2.DeleteServiceAccountRequest.FromString,
                    response_serializer=idp__pb2.ServiceAccount.SerializeToString,
            ),
            'List': grpc.unary_stream_rpc_method_handler(
                    servicer.List,
                    request_deserializer=idp__pb2.ListServiceAccountsRequest.FromString,
                    response_serializer=idp__pb2.ServiceAccount.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'idp.ServiceAccounts', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServiceAccounts(object):
    """SERVICE ACCOUNTS

    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idp.ServiceAccounts/Create',
            idp__pb2.CreateServiceAccountRequest.SerializeToString,
            idp__pb2.CreateServiceAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idp.ServiceAccounts/Get',
            idp__pb2.GetServiceAccountRequest.SerializeToString,
            idp__pb2.ServiceAccount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idp.ServiceAccounts/Update',
            idp__pb2.UpdateServiceAccountRequest.SerializeToString,
            idp__pb2.UpdateServiceAccountResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idp.ServiceAccounts/Delete',
            idp__pb2.DeleteServiceAccountRequest.SerializeToString,
            idp__pb2.ServiceAccount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/idp.ServiceAccounts/List',
            idp__pb2.ListServiceAccountsRequest.SerializeToString,
            idp__pb2.ServiceAccount.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class AuthenticationStub(object):
    """AUTHENTICATION

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/idp.Authentication/Login',
                request_serializer=idp__pb2.LoginRequest.SerializeToString,
                response_deserializer=idp__pb2.LoginResponse.FromString,
                )
        self.Refresh = channel.unary_unary(
                '/idp.Authentication/Refresh',
                request_serializer=idp__pb2.RefreshRequest.SerializeToString,
                response_deserializer=idp__pb2.LoginResponse.FromString,
                )


class AuthenticationServicer(object):
    """AUTHENTICATION

    """

    def Login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Refresh(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthenticationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=idp__pb2.LoginRequest.FromString,
                    response_serializer=idp__pb2.LoginResponse.SerializeToString,
            ),
            'Refresh': grpc.unary_unary_rpc_method_handler(
                    servicer.Refresh,
                    request_deserializer=idp__pb2.RefreshRequest.FromString,
                    response_serializer=idp__pb2.LoginResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'idp.Authentication', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Authentication(object):
    """AUTHENTICATION

    """

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idp.Authentication/Login',
            idp__pb2.LoginRequest.SerializeToString,
            idp__pb2.LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Refresh(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idp.Authentication/Refresh',
            idp__pb2.RefreshRequest.SerializeToString,
            idp__pb2.LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class GroupsStub(object):
    """GROUPS

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/idp.Groups/Create',
                request_serializer=idp__pb2.CreateGroupRequest.SerializeToString,
                response_deserializer=idp__pb2.Group.FromString,
                )
        self.Get = channel.unary_unary(
                '/idp.Groups/Get',
                request_serializer=idp__pb2.GetGroupRequest.SerializeToString,
                response_deserializer=idp__pb2.Group.FromString,
                )
        self.Update = channel.unary_unary(
                '/idp.Groups/Update',
                request_serializer=idp__pb2.UpdateGroupRequest.SerializeToString,
                response_deserializer=idp__pb2.Group.FromString,
                )
        self.Delete = channel.unary_unary(
                '/idp.Groups/Delete',
                request_serializer=idp__pb2.DeleteGroupRequest.SerializeToString,
                response_deserializer=idp__pb2.Group.FromString,
                )
        self.List = channel.unary_stream(
                '/idp.Groups/List',
                request_serializer=idp__pb2.ListGroupsRequest.SerializeToString,
                response_deserializer=idp__pb2.Group.FromString,
                )
        self.AddUser = channel.unary_unary(
                '/idp.Groups/AddUser',
                request_serializer=idp__pb2.AddUserToGroupRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.DelUser = channel.unary_unary(
                '/idp.Groups/DelUser',
                request_serializer=idp__pb2.DelUserFromGroupRequest.SerializeToString,
                response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                )
        self.ListMembers = channel.unary_stream(
                '/idp.Groups/ListMembers',
                request_serializer=idp__pb2.ListGroupMembersRequest.SerializeToString,
                response_deserializer=idp__pb2.GroupMember.FromString,
                )


class GroupsServicer(object):
    """GROUPS

    """

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DelUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListMembers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GroupsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=idp__pb2.CreateGroupRequest.FromString,
                    response_serializer=idp__pb2.Group.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=idp__pb2.GetGroupRequest.FromString,
                    response_serializer=idp__pb2.Group.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=idp__pb2.UpdateGroupRequest.FromString,
                    response_serializer=idp__pb2.Group.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=idp__pb2.DeleteGroupRequest.FromString,
                    response_serializer=idp__pb2.Group.SerializeToString,
            ),
            'List': grpc.unary_stream_rpc_method_handler(
                    servicer.List,
                    request_deserializer=idp__pb2.ListGroupsRequest.FromString,
                    response_serializer=idp__pb2.Group.SerializeToString,
            ),
            'AddUser': grpc.unary_unary_rpc_method_handler(
                    servicer.AddUser,
                    request_deserializer=idp__pb2.AddUserToGroupRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'DelUser': grpc.unary_unary_rpc_method_handler(
                    servicer.DelUser,
                    request_deserializer=idp__pb2.DelUserFromGroupRequest.FromString,
                    response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            ),
            'ListMembers': grpc.unary_stream_rpc_method_handler(
                    servicer.ListMembers,
                    request_deserializer=idp__pb2.ListGroupMembersRequest.FromString,
                    response_serializer=idp__pb2.GroupMember.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'idp.Groups', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Groups(object):
    """GROUPS

    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idp.Groups/Create',
            idp__pb2.CreateGroupRequest.SerializeToString,
            idp__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idp.Groups/Get',
            idp__pb2.GetGroupRequest.SerializeToString,
            idp__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idp.Groups/Update',
            idp__pb2.UpdateGroupRequest.SerializeToString,
            idp__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idp.Groups/Delete',
            idp__pb2.DeleteGroupRequest.SerializeToString,
            idp__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/idp.Groups/List',
            idp__pb2.ListGroupsRequest.SerializeToString,
            idp__pb2.Group.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idp.Groups/AddUser',
            idp__pb2.AddUserToGroupRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DelUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/idp.Groups/DelUser',
            idp__pb2.DelUserFromGroupRequest.SerializeToString,
            google_dot_protobuf_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListMembers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/idp.Groups/ListMembers',
            idp__pb2.ListGroupMembersRequest.SerializeToString,
            idp__pb2.GroupMember.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
