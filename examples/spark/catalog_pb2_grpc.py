# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import catalog_pb2 as catalog__pb2


class ResourcesStub(object):
    """RESOURCES 

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/catalog.Resources/Create',
                request_serializer=catalog__pb2.CreateResourceRequest.SerializeToString,
                response_deserializer=catalog__pb2.Resource.FromString,
                )
        self.Get = channel.unary_unary(
                '/catalog.Resources/Get',
                request_serializer=catalog__pb2.GetResourceRequest.SerializeToString,
                response_deserializer=catalog__pb2.Resource.FromString,
                )
        self.Update = channel.unary_unary(
                '/catalog.Resources/Update',
                request_serializer=catalog__pb2.UpdateResourceRequest.SerializeToString,
                response_deserializer=catalog__pb2.Resource.FromString,
                )
        self.Delete = channel.unary_unary(
                '/catalog.Resources/Delete',
                request_serializer=catalog__pb2.DeleteResourceRequest.SerializeToString,
                response_deserializer=catalog__pb2.Resource.FromString,
                )
        self.List = channel.unary_stream(
                '/catalog.Resources/List',
                request_serializer=catalog__pb2.ListResourcesRequest.SerializeToString,
                response_deserializer=catalog__pb2.Resource.FromString,
                )


class ResourcesServicer(object):
    """RESOURCES 

    """

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ResourcesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=catalog__pb2.CreateResourceRequest.FromString,
                    response_serializer=catalog__pb2.Resource.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=catalog__pb2.GetResourceRequest.FromString,
                    response_serializer=catalog__pb2.Resource.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=catalog__pb2.UpdateResourceRequest.FromString,
                    response_serializer=catalog__pb2.Resource.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=catalog__pb2.DeleteResourceRequest.FromString,
                    response_serializer=catalog__pb2.Resource.SerializeToString,
            ),
            'List': grpc.unary_stream_rpc_method_handler(
                    servicer.List,
                    request_deserializer=catalog__pb2.ListResourcesRequest.FromString,
                    response_serializer=catalog__pb2.Resource.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'catalog.Resources', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Resources(object):
    """RESOURCES 

    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/catalog.Resources/Create',
            catalog__pb2.CreateResourceRequest.SerializeToString,
            catalog__pb2.Resource.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/catalog.Resources/Get',
            catalog__pb2.GetResourceRequest.SerializeToString,
            catalog__pb2.Resource.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/catalog.Resources/Update',
            catalog__pb2.UpdateResourceRequest.SerializeToString,
            catalog__pb2.Resource.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/catalog.Resources/Delete',
            catalog__pb2.DeleteResourceRequest.SerializeToString,
            catalog__pb2.Resource.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/catalog.Resources/List',
            catalog__pb2.ListResourcesRequest.SerializeToString,
            catalog__pb2.Resource.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class SchemasStub(object):
    """SCHEMAS 

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Create = channel.unary_unary(
                '/catalog.Schemas/Create',
                request_serializer=catalog__pb2.CreateSchemaRequest.SerializeToString,
                response_deserializer=catalog__pb2.Schema.FromString,
                )
        self.Get = channel.unary_unary(
                '/catalog.Schemas/Get',
                request_serializer=catalog__pb2.GetSchemaRequest.SerializeToString,
                response_deserializer=catalog__pb2.Schema.FromString,
                )
        self.Update = channel.unary_unary(
                '/catalog.Schemas/Update',
                request_serializer=catalog__pb2.UpdateSchemaRequest.SerializeToString,
                response_deserializer=catalog__pb2.Schema.FromString,
                )
        self.Delete = channel.unary_unary(
                '/catalog.Schemas/Delete',
                request_serializer=catalog__pb2.DeleteSchemaRequest.SerializeToString,
                response_deserializer=catalog__pb2.Schema.FromString,
                )
        self.List = channel.unary_stream(
                '/catalog.Schemas/List',
                request_serializer=catalog__pb2.ListSchemasRequest.SerializeToString,
                response_deserializer=catalog__pb2.Schema.FromString,
                )


class SchemasServicer(object):
    """SCHEMAS 

    """

    def Create(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Update(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Delete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SchemasServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Create': grpc.unary_unary_rpc_method_handler(
                    servicer.Create,
                    request_deserializer=catalog__pb2.CreateSchemaRequest.FromString,
                    response_serializer=catalog__pb2.Schema.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=catalog__pb2.GetSchemaRequest.FromString,
                    response_serializer=catalog__pb2.Schema.SerializeToString,
            ),
            'Update': grpc.unary_unary_rpc_method_handler(
                    servicer.Update,
                    request_deserializer=catalog__pb2.UpdateSchemaRequest.FromString,
                    response_serializer=catalog__pb2.Schema.SerializeToString,
            ),
            'Delete': grpc.unary_unary_rpc_method_handler(
                    servicer.Delete,
                    request_deserializer=catalog__pb2.DeleteSchemaRequest.FromString,
                    response_serializer=catalog__pb2.Schema.SerializeToString,
            ),
            'List': grpc.unary_stream_rpc_method_handler(
                    servicer.List,
                    request_deserializer=catalog__pb2.ListSchemasRequest.FromString,
                    response_serializer=catalog__pb2.Schema.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'catalog.Schemas', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Schemas(object):
    """SCHEMAS 

    """

    @staticmethod
    def Create(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/catalog.Schemas/Create',
            catalog__pb2.CreateSchemaRequest.SerializeToString,
            catalog__pb2.Schema.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/catalog.Schemas/Get',
            catalog__pb2.GetSchemaRequest.SerializeToString,
            catalog__pb2.Schema.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Update(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/catalog.Schemas/Update',
            catalog__pb2.UpdateSchemaRequest.SerializeToString,
            catalog__pb2.Schema.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Delete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/catalog.Schemas/Delete',
            catalog__pb2.DeleteSchemaRequest.SerializeToString,
            catalog__pb2.Schema.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/catalog.Schemas/List',
            catalog__pb2.ListSchemasRequest.SerializeToString,
            catalog__pb2.Schema.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class PermissionsStub(object):
    """PERMISSIONS 

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Share = channel.unary_unary(
                '/catalog.Permissions/Share',
                request_serializer=catalog__pb2.ShareRequest.SerializeToString,
                response_deserializer=catalog__pb2.PermissionInfo.FromString,
                )
        self.Unshare = channel.unary_unary(
                '/catalog.Permissions/Unshare',
                request_serializer=catalog__pb2.UnshareRequest.SerializeToString,
                response_deserializer=catalog__pb2.PermissionInfo.FromString,
                )
        self.Get = channel.unary_unary(
                '/catalog.Permissions/Get',
                request_serializer=catalog__pb2.GetPermissionInfoRequest.SerializeToString,
                response_deserializer=catalog__pb2.PermissionInfo.FromString,
                )
        self.List = channel.unary_stream(
                '/catalog.Permissions/List',
                request_serializer=catalog__pb2.ListPermissionsRequest.SerializeToString,
                response_deserializer=catalog__pb2.PermissionInfo.FromString,
                )
        self.Check = channel.unary_unary(
                '/catalog.Permissions/Check',
                request_serializer=catalog__pb2.PermissionCheckRequest.SerializeToString,
                response_deserializer=catalog__pb2.PermissionCheckResponse.FromString,
                )


class PermissionsServicer(object):
    """PERMISSIONS 

    """

    def Share(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unshare(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Get(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def List(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Check(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PermissionsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Share': grpc.unary_unary_rpc_method_handler(
                    servicer.Share,
                    request_deserializer=catalog__pb2.ShareRequest.FromString,
                    response_serializer=catalog__pb2.PermissionInfo.SerializeToString,
            ),
            'Unshare': grpc.unary_unary_rpc_method_handler(
                    servicer.Unshare,
                    request_deserializer=catalog__pb2.UnshareRequest.FromString,
                    response_serializer=catalog__pb2.PermissionInfo.SerializeToString,
            ),
            'Get': grpc.unary_unary_rpc_method_handler(
                    servicer.Get,
                    request_deserializer=catalog__pb2.GetPermissionInfoRequest.FromString,
                    response_serializer=catalog__pb2.PermissionInfo.SerializeToString,
            ),
            'List': grpc.unary_stream_rpc_method_handler(
                    servicer.List,
                    request_deserializer=catalog__pb2.ListPermissionsRequest.FromString,
                    response_serializer=catalog__pb2.PermissionInfo.SerializeToString,
            ),
            'Check': grpc.unary_unary_rpc_method_handler(
                    servicer.Check,
                    request_deserializer=catalog__pb2.PermissionCheckRequest.FromString,
                    response_serializer=catalog__pb2.PermissionCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'catalog.Permissions', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Permissions(object):
    """PERMISSIONS 

    """

    @staticmethod
    def Share(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/catalog.Permissions/Share',
            catalog__pb2.ShareRequest.SerializeToString,
            catalog__pb2.PermissionInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unshare(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/catalog.Permissions/Unshare',
            catalog__pb2.UnshareRequest.SerializeToString,
            catalog__pb2.PermissionInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Get(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/catalog.Permissions/Get',
            catalog__pb2.GetPermissionInfoRequest.SerializeToString,
            catalog__pb2.PermissionInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def List(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/catalog.Permissions/List',
            catalog__pb2.ListPermissionsRequest.SerializeToString,
            catalog__pb2.PermissionInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/catalog.Permissions/Check',
            catalog__pb2.PermissionCheckRequest.SerializeToString,
            catalog__pb2.PermissionCheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class EventsStub(object):
    """EVENTS 

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/catalog.Events/Publish',
                request_serializer=catalog__pb2.PublishRequest.SerializeToString,
                response_deserializer=catalog__pb2.Event.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/catalog.Events/Subscribe',
                request_serializer=catalog__pb2.SubscribeRequest.SerializeToString,
                response_deserializer=catalog__pb2.Event.FromString,
                )


class EventsServicer(object):
    """EVENTS 

    """

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=catalog__pb2.PublishRequest.FromString,
                    response_serializer=catalog__pb2.Event.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=catalog__pb2.SubscribeRequest.FromString,
                    response_serializer=catalog__pb2.Event.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'catalog.Events', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Events(object):
    """EVENTS 

    """

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/catalog.Events/Publish',
            catalog__pb2.PublishRequest.SerializeToString,
            catalog__pb2.Event.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/catalog.Events/Subscribe',
            catalog__pb2.SubscribeRequest.SerializeToString,
            catalog__pb2.Event.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class LocksStub(object):
    """LOCKING 

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Lock = channel.unary_stream(
                '/catalog.Locks/Lock',
                request_serializer=catalog__pb2.LockRequest.SerializeToString,
                response_deserializer=catalog__pb2.LockResponse.FromString,
                )
        self.TryLock = channel.unary_stream(
                '/catalog.Locks/TryLock',
                request_serializer=catalog__pb2.LockRequest.SerializeToString,
                response_deserializer=catalog__pb2.LockResponse.FromString,
                )


class LocksServicer(object):
    """LOCKING 

    """

    def Lock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TryLock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LocksServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Lock': grpc.unary_stream_rpc_method_handler(
                    servicer.Lock,
                    request_deserializer=catalog__pb2.LockRequest.FromString,
                    response_serializer=catalog__pb2.LockResponse.SerializeToString,
            ),
            'TryLock': grpc.unary_stream_rpc_method_handler(
                    servicer.TryLock,
                    request_deserializer=catalog__pb2.LockRequest.FromString,
                    response_serializer=catalog__pb2.LockResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'catalog.Locks', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Locks(object):
    """LOCKING 

    """

    @staticmethod
    def Lock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/catalog.Locks/Lock',
            catalog__pb2.LockRequest.SerializeToString,
            catalog__pb2.LockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TryLock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/catalog.Locks/TryLock',
            catalog__pb2.LockRequest.SerializeToString,
            catalog__pb2.LockResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
